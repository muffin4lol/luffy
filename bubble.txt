//1 libraries

#include <iostream>
#include <omp.h>

using namespace std;

//3 function defination

void parallelBubbleSort(int arr[], int size){
	int i, j;
	bool swapped;											

	for(int i=0; i<size-1 ; i++){
		swapped = false;

		#pragma omp parallel for shared(arr, size, swapped)
		for(int j=0; j<size-i-1; j++){
			if(arr[j]>arr[j+1]){
				#pragma omp critical
				{
					swap(arr[j], arr[j+1]);
					swapped = true;
				}											
			}
		}
		
		if(!swapped){
			break;
		}
		
	}
}

void bubbleSort(int arr[], int size){
	int i, j;
	bool swapped;											

	for(int i=0; i<size-1 ; i++){
		swapped = false;

		
		for(int j=0; j<size-i-1; j++){
			if(arr[j]>arr[j+1]){
				
					swap(arr[j], arr[j+1]);
					swapped = true;
															
			}
		}
		
		if(!swapped){
			break;
		}
		
	}
}

//2 main function

int main(){
	int size;
	cout << "enter size of array: ";
	cin >> size;

	int arr[size];
	cout << "enter array elements:\n";
	for(int i=0; i < size; i++){
		cin >> arr[i];
	}

	double start_time = omp_get_wtime();
	bubbleSort(arr, size);
	double end_time = omp_get_wtime();

	cout << "series Sorted array: ";
	for(int i=0; i < size; i++){
		cout << arr[i] << " ";
	}
	
	cout << endl ;

	double p_start_time = omp_get_wtime();
	parallelBubbleSort(arr, size);
	double p_end_time = omp_get_wtime();	

	cout << "parallel Sorted array: ";
	for(int i=0; i < size; i++){
		cout << arr[i] << " ";
	}

	cout << endl;

	cout << "series execution time: " << end_time - start_time << "sec\n";	
	cout << "parallel execution time: " << p_end_time - p_start_time << "sec";
	return 0;
}